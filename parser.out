Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    RBRACE
    SEMICOLON
    newline
    ELSE
    EQ
    IF
    LBRACE
    ELSE_IF

Grammar

Rule 0     S' -> expression
Rule 1     expression -> logicExpression
Rule 2     logicExpression -> logicExpression OR andExpression
Rule 3     logicExpression -> andExpression
Rule 4     andExpression -> andExpression AND relExpression
Rule 5     andExpression -> eqExpression
Rule 6     eqExpression -> eqExpression IS_EQ nonEqExpression
Rule 7     eqExpression -> nonEqExpression
Rule 8     nonEqExpression -> nonEqExpression NOT_EQ relExpression
Rule 9     nonEqExpression -> relExpression
Rule 10    relExpression -> relExpression LESS arithExpression
Rule 11    relExpression -> relExpression GREATER arithExpression
Rule 12    relExpression -> relExpression GREATER_EQ arithExpression
Rule 13    relExpression -> relExpression LESS_EQ arithExpression
Rule 14    relExpression -> arithExpression
Rule 15    arithExpression -> arithExpression PLUS term
Rule 16    arithExpression -> arithExpression MINUS term
Rule 17    arithExpression -> term
Rule 18    term -> term TIMES term1
Rule 19    term -> term DIVIDE term1
Rule 20    term -> term1
Rule 21    term1 -> term1 MODULO term2
Rule 22    term1 -> term1 FLOOR_DIV term2
Rule 23    term1 -> term2
Rule 24    term2 -> term2 POWER factor
Rule 25    term2 -> factor
Rule 26    factor -> NUMBER
Rule 27    factor -> TRUE
Rule 28    factor -> FALSE
Rule 29    factor -> ID
Rule 30    factor -> NOT factor
Rule 31    factor -> MINUS factor
Rule 32    factor -> LPAREN expression RPAREN
Rule 33    factor -> isTRUE LPAREN expression RPAREN
Rule 34    factor -> PRINT LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 4
DIVIDE               : 19
ELSE                 : 
ELSE_IF              : 
EQ                   : 
FALSE                : 28
FLOOR_DIV            : 22
GREATER              : 11
GREATER_EQ           : 12
ID                   : 29
IF                   : 
IS_EQ                : 6
LBRACE               : 
LESS                 : 10
LESS_EQ              : 13
LPAREN               : 32 33 34
MINUS                : 16 31
MODULO               : 21
NOT                  : 30
NOT_EQ               : 8
NUMBER               : 26
OR                   : 2
PLUS                 : 15
POWER                : 24
PRINT                : 34
RBRACE               : 
RPAREN               : 32 33 34
SEMICOLON            : 
TIMES                : 18
TRUE                 : 27
error                : 
isTRUE               : 33
newline              : 

Nonterminals, with rules where they appear

andExpression        : 2 3 4
arithExpression      : 10 11 12 13 14 15 16
eqExpression         : 5 6
expression           : 32 33 34 0
factor               : 24 25 30 31
logicExpression      : 1 2
nonEqExpression      : 6 7 8
relExpression        : 4 8 9 10 11 12 13
term                 : 15 16 17 18 19
term1                : 18 19 20 21 22
term2                : 21 22 23 24

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . logicExpression
    (2) logicExpression -> . logicExpression OR andExpression
    (3) logicExpression -> . andExpression
    (4) andExpression -> . andExpression AND relExpression
    (5) andExpression -> . eqExpression
    (6) eqExpression -> . eqExpression IS_EQ nonEqExpression
    (7) eqExpression -> . nonEqExpression
    (8) nonEqExpression -> . nonEqExpression NOT_EQ relExpression
    (9) nonEqExpression -> . relExpression
    (10) relExpression -> . relExpression LESS arithExpression
    (11) relExpression -> . relExpression GREATER arithExpression
    (12) relExpression -> . relExpression GREATER_EQ arithExpression
    (13) relExpression -> . relExpression LESS_EQ arithExpression
    (14) relExpression -> . arithExpression
    (15) arithExpression -> . arithExpression PLUS term
    (16) arithExpression -> . arithExpression MINUS term
    (17) arithExpression -> . term
    (18) term -> . term TIMES term1
    (19) term -> . term DIVIDE term1
    (20) term -> . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term                           shift and go to state 17
    term1                          shift and go to state 2
    relExpression                  shift and go to state 7
    arithExpression                shift and go to state 11
    logicExpression                shift and go to state 8
    eqExpression                   shift and go to state 9
    factor                         shift and go to state 10
    andExpression                  shift and go to state 19
    nonEqExpression                shift and go to state 15
    expression                     shift and go to state 20
    term2                          shift and go to state 1

state 1

    (23) term1 -> term2 .
    (24) term2 -> term2 . POWER factor

    MODULO          reduce using rule 23 (term1 -> term2 .)
    FLOOR_DIV       reduce using rule 23 (term1 -> term2 .)
    TIMES           reduce using rule 23 (term1 -> term2 .)
    DIVIDE          reduce using rule 23 (term1 -> term2 .)
    PLUS            reduce using rule 23 (term1 -> term2 .)
    MINUS           reduce using rule 23 (term1 -> term2 .)
    LESS            reduce using rule 23 (term1 -> term2 .)
    GREATER         reduce using rule 23 (term1 -> term2 .)
    GREATER_EQ      reduce using rule 23 (term1 -> term2 .)
    LESS_EQ         reduce using rule 23 (term1 -> term2 .)
    AND             reduce using rule 23 (term1 -> term2 .)
    OR              reduce using rule 23 (term1 -> term2 .)
    $end            reduce using rule 23 (term1 -> term2 .)
    RPAREN          reduce using rule 23 (term1 -> term2 .)
    NOT_EQ          reduce using rule 23 (term1 -> term2 .)
    IS_EQ           reduce using rule 23 (term1 -> term2 .)
    POWER           shift and go to state 21


state 2

    (20) term -> term1 .
    (21) term1 -> term1 . MODULO term2
    (22) term1 -> term1 . FLOOR_DIV term2

    TIMES           reduce using rule 20 (term -> term1 .)
    DIVIDE          reduce using rule 20 (term -> term1 .)
    PLUS            reduce using rule 20 (term -> term1 .)
    MINUS           reduce using rule 20 (term -> term1 .)
    LESS            reduce using rule 20 (term -> term1 .)
    GREATER         reduce using rule 20 (term -> term1 .)
    GREATER_EQ      reduce using rule 20 (term -> term1 .)
    LESS_EQ         reduce using rule 20 (term -> term1 .)
    NOT_EQ          reduce using rule 20 (term -> term1 .)
    IS_EQ           reduce using rule 20 (term -> term1 .)
    AND             reduce using rule 20 (term -> term1 .)
    OR              reduce using rule 20 (term -> term1 .)
    $end            reduce using rule 20 (term -> term1 .)
    RPAREN          reduce using rule 20 (term -> term1 .)
    MODULO          shift and go to state 23
    FLOOR_DIV       shift and go to state 22


state 3

    (26) factor -> NUMBER .

    POWER           reduce using rule 26 (factor -> NUMBER .)
    MODULO          reduce using rule 26 (factor -> NUMBER .)
    FLOOR_DIV       reduce using rule 26 (factor -> NUMBER .)
    TIMES           reduce using rule 26 (factor -> NUMBER .)
    DIVIDE          reduce using rule 26 (factor -> NUMBER .)
    PLUS            reduce using rule 26 (factor -> NUMBER .)
    MINUS           reduce using rule 26 (factor -> NUMBER .)
    LESS            reduce using rule 26 (factor -> NUMBER .)
    GREATER         reduce using rule 26 (factor -> NUMBER .)
    GREATER_EQ      reduce using rule 26 (factor -> NUMBER .)
    LESS_EQ         reduce using rule 26 (factor -> NUMBER .)
    NOT_EQ          reduce using rule 26 (factor -> NUMBER .)
    IS_EQ           reduce using rule 26 (factor -> NUMBER .)
    AND             reduce using rule 26 (factor -> NUMBER .)
    OR              reduce using rule 26 (factor -> NUMBER .)
    RPAREN          reduce using rule 26 (factor -> NUMBER .)
    $end            reduce using rule 26 (factor -> NUMBER .)


state 4

    (34) factor -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 24


state 5

    (27) factor -> TRUE .

    POWER           reduce using rule 27 (factor -> TRUE .)
    MODULO          reduce using rule 27 (factor -> TRUE .)
    FLOOR_DIV       reduce using rule 27 (factor -> TRUE .)
    TIMES           reduce using rule 27 (factor -> TRUE .)
    DIVIDE          reduce using rule 27 (factor -> TRUE .)
    PLUS            reduce using rule 27 (factor -> TRUE .)
    MINUS           reduce using rule 27 (factor -> TRUE .)
    LESS            reduce using rule 27 (factor -> TRUE .)
    GREATER         reduce using rule 27 (factor -> TRUE .)
    GREATER_EQ      reduce using rule 27 (factor -> TRUE .)
    LESS_EQ         reduce using rule 27 (factor -> TRUE .)
    NOT_EQ          reduce using rule 27 (factor -> TRUE .)
    IS_EQ           reduce using rule 27 (factor -> TRUE .)
    AND             reduce using rule 27 (factor -> TRUE .)
    OR              reduce using rule 27 (factor -> TRUE .)
    RPAREN          reduce using rule 27 (factor -> TRUE .)
    $end            reduce using rule 27 (factor -> TRUE .)


state 6

    (31) factor -> MINUS . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    factor                         shift and go to state 25

state 7

    (9) nonEqExpression -> relExpression .
    (10) relExpression -> relExpression . LESS arithExpression
    (11) relExpression -> relExpression . GREATER arithExpression
    (12) relExpression -> relExpression . GREATER_EQ arithExpression
    (13) relExpression -> relExpression . LESS_EQ arithExpression

    NOT_EQ          reduce using rule 9 (nonEqExpression -> relExpression .)
    IS_EQ           reduce using rule 9 (nonEqExpression -> relExpression .)
    AND             reduce using rule 9 (nonEqExpression -> relExpression .)
    OR              reduce using rule 9 (nonEqExpression -> relExpression .)
    $end            reduce using rule 9 (nonEqExpression -> relExpression .)
    RPAREN          reduce using rule 9 (nonEqExpression -> relExpression .)
    LESS            shift and go to state 28
    GREATER         shift and go to state 27
    GREATER_EQ      shift and go to state 29
    LESS_EQ         shift and go to state 26


state 8

    (1) expression -> logicExpression .
    (2) logicExpression -> logicExpression . OR andExpression

    RPAREN          reduce using rule 1 (expression -> logicExpression .)
    $end            reduce using rule 1 (expression -> logicExpression .)
    OR              shift and go to state 30


state 9

    (5) andExpression -> eqExpression .
    (6) eqExpression -> eqExpression . IS_EQ nonEqExpression

    AND             reduce using rule 5 (andExpression -> eqExpression .)
    OR              reduce using rule 5 (andExpression -> eqExpression .)
    RPAREN          reduce using rule 5 (andExpression -> eqExpression .)
    $end            reduce using rule 5 (andExpression -> eqExpression .)
    IS_EQ           shift and go to state 31


state 10

    (25) term2 -> factor .

    POWER           reduce using rule 25 (term2 -> factor .)
    MODULO          reduce using rule 25 (term2 -> factor .)
    FLOOR_DIV       reduce using rule 25 (term2 -> factor .)
    TIMES           reduce using rule 25 (term2 -> factor .)
    DIVIDE          reduce using rule 25 (term2 -> factor .)
    PLUS            reduce using rule 25 (term2 -> factor .)
    MINUS           reduce using rule 25 (term2 -> factor .)
    LESS            reduce using rule 25 (term2 -> factor .)
    GREATER         reduce using rule 25 (term2 -> factor .)
    GREATER_EQ      reduce using rule 25 (term2 -> factor .)
    LESS_EQ         reduce using rule 25 (term2 -> factor .)
    NOT_EQ          reduce using rule 25 (term2 -> factor .)
    IS_EQ           reduce using rule 25 (term2 -> factor .)
    AND             reduce using rule 25 (term2 -> factor .)
    OR              reduce using rule 25 (term2 -> factor .)
    $end            reduce using rule 25 (term2 -> factor .)
    RPAREN          reduce using rule 25 (term2 -> factor .)


state 11

    (14) relExpression -> arithExpression .
    (15) arithExpression -> arithExpression . PLUS term
    (16) arithExpression -> arithExpression . MINUS term

    LESS            reduce using rule 14 (relExpression -> arithExpression .)
    GREATER         reduce using rule 14 (relExpression -> arithExpression .)
    GREATER_EQ      reduce using rule 14 (relExpression -> arithExpression .)
    LESS_EQ         reduce using rule 14 (relExpression -> arithExpression .)
    AND             reduce using rule 14 (relExpression -> arithExpression .)
    OR              reduce using rule 14 (relExpression -> arithExpression .)
    $end            reduce using rule 14 (relExpression -> arithExpression .)
    RPAREN          reduce using rule 14 (relExpression -> arithExpression .)
    NOT_EQ          reduce using rule 14 (relExpression -> arithExpression .)
    IS_EQ           reduce using rule 14 (relExpression -> arithExpression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 12

    (30) factor -> NOT . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    factor                         shift and go to state 34

state 13

    (32) factor -> LPAREN . expression RPAREN
    (1) expression -> . logicExpression
    (2) logicExpression -> . logicExpression OR andExpression
    (3) logicExpression -> . andExpression
    (4) andExpression -> . andExpression AND relExpression
    (5) andExpression -> . eqExpression
    (6) eqExpression -> . eqExpression IS_EQ nonEqExpression
    (7) eqExpression -> . nonEqExpression
    (8) nonEqExpression -> . nonEqExpression NOT_EQ relExpression
    (9) nonEqExpression -> . relExpression
    (10) relExpression -> . relExpression LESS arithExpression
    (11) relExpression -> . relExpression GREATER arithExpression
    (12) relExpression -> . relExpression GREATER_EQ arithExpression
    (13) relExpression -> . relExpression LESS_EQ arithExpression
    (14) relExpression -> . arithExpression
    (15) arithExpression -> . arithExpression PLUS term
    (16) arithExpression -> . arithExpression MINUS term
    (17) arithExpression -> . term
    (18) term -> . term TIMES term1
    (19) term -> . term DIVIDE term1
    (20) term -> . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term                           shift and go to state 17
    term1                          shift and go to state 2
    relExpression                  shift and go to state 7
    arithExpression                shift and go to state 11
    logicExpression                shift and go to state 8
    eqExpression                   shift and go to state 9
    factor                         shift and go to state 10
    andExpression                  shift and go to state 19
    nonEqExpression                shift and go to state 15
    expression                     shift and go to state 35
    term2                          shift and go to state 1

state 14

    (28) factor -> FALSE .

    POWER           reduce using rule 28 (factor -> FALSE .)
    MODULO          reduce using rule 28 (factor -> FALSE .)
    FLOOR_DIV       reduce using rule 28 (factor -> FALSE .)
    TIMES           reduce using rule 28 (factor -> FALSE .)
    DIVIDE          reduce using rule 28 (factor -> FALSE .)
    PLUS            reduce using rule 28 (factor -> FALSE .)
    MINUS           reduce using rule 28 (factor -> FALSE .)
    LESS            reduce using rule 28 (factor -> FALSE .)
    GREATER         reduce using rule 28 (factor -> FALSE .)
    GREATER_EQ      reduce using rule 28 (factor -> FALSE .)
    LESS_EQ         reduce using rule 28 (factor -> FALSE .)
    NOT_EQ          reduce using rule 28 (factor -> FALSE .)
    IS_EQ           reduce using rule 28 (factor -> FALSE .)
    AND             reduce using rule 28 (factor -> FALSE .)
    OR              reduce using rule 28 (factor -> FALSE .)
    RPAREN          reduce using rule 28 (factor -> FALSE .)
    $end            reduce using rule 28 (factor -> FALSE .)


state 15

    (7) eqExpression -> nonEqExpression .
    (8) nonEqExpression -> nonEqExpression . NOT_EQ relExpression

    IS_EQ           reduce using rule 7 (eqExpression -> nonEqExpression .)
    AND             reduce using rule 7 (eqExpression -> nonEqExpression .)
    OR              reduce using rule 7 (eqExpression -> nonEqExpression .)
    RPAREN          reduce using rule 7 (eqExpression -> nonEqExpression .)
    $end            reduce using rule 7 (eqExpression -> nonEqExpression .)
    NOT_EQ          shift and go to state 36


state 16

    (29) factor -> ID .

    POWER           reduce using rule 29 (factor -> ID .)
    MODULO          reduce using rule 29 (factor -> ID .)
    FLOOR_DIV       reduce using rule 29 (factor -> ID .)
    TIMES           reduce using rule 29 (factor -> ID .)
    DIVIDE          reduce using rule 29 (factor -> ID .)
    PLUS            reduce using rule 29 (factor -> ID .)
    MINUS           reduce using rule 29 (factor -> ID .)
    LESS            reduce using rule 29 (factor -> ID .)
    GREATER         reduce using rule 29 (factor -> ID .)
    GREATER_EQ      reduce using rule 29 (factor -> ID .)
    LESS_EQ         reduce using rule 29 (factor -> ID .)
    NOT_EQ          reduce using rule 29 (factor -> ID .)
    IS_EQ           reduce using rule 29 (factor -> ID .)
    AND             reduce using rule 29 (factor -> ID .)
    OR              reduce using rule 29 (factor -> ID .)
    RPAREN          reduce using rule 29 (factor -> ID .)
    $end            reduce using rule 29 (factor -> ID .)


state 17

    (17) arithExpression -> term .
    (18) term -> term . TIMES term1
    (19) term -> term . DIVIDE term1

    PLUS            reduce using rule 17 (arithExpression -> term .)
    MINUS           reduce using rule 17 (arithExpression -> term .)
    LESS            reduce using rule 17 (arithExpression -> term .)
    GREATER         reduce using rule 17 (arithExpression -> term .)
    GREATER_EQ      reduce using rule 17 (arithExpression -> term .)
    LESS_EQ         reduce using rule 17 (arithExpression -> term .)
    NOT_EQ          reduce using rule 17 (arithExpression -> term .)
    IS_EQ           reduce using rule 17 (arithExpression -> term .)
    AND             reduce using rule 17 (arithExpression -> term .)
    OR              reduce using rule 17 (arithExpression -> term .)
    RPAREN          reduce using rule 17 (arithExpression -> term .)
    $end            reduce using rule 17 (arithExpression -> term .)
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 37


state 18

    (33) factor -> isTRUE . LPAREN expression RPAREN

    LPAREN          shift and go to state 39


state 19

    (3) logicExpression -> andExpression .
    (4) andExpression -> andExpression . AND relExpression

    OR              reduce using rule 3 (logicExpression -> andExpression .)
    RPAREN          reduce using rule 3 (logicExpression -> andExpression .)
    $end            reduce using rule 3 (logicExpression -> andExpression .)
    AND             shift and go to state 40


state 20

    (0) S' -> expression .



state 21

    (24) term2 -> term2 POWER . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    factor                         shift and go to state 41

state 22

    (22) term1 -> term1 FLOOR_DIV . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term2                          shift and go to state 42
    factor                         shift and go to state 10

state 23

    (21) term1 -> term1 MODULO . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term2                          shift and go to state 43
    factor                         shift and go to state 10

state 24

    (34) factor -> PRINT LPAREN . expression RPAREN
    (1) expression -> . logicExpression
    (2) logicExpression -> . logicExpression OR andExpression
    (3) logicExpression -> . andExpression
    (4) andExpression -> . andExpression AND relExpression
    (5) andExpression -> . eqExpression
    (6) eqExpression -> . eqExpression IS_EQ nonEqExpression
    (7) eqExpression -> . nonEqExpression
    (8) nonEqExpression -> . nonEqExpression NOT_EQ relExpression
    (9) nonEqExpression -> . relExpression
    (10) relExpression -> . relExpression LESS arithExpression
    (11) relExpression -> . relExpression GREATER arithExpression
    (12) relExpression -> . relExpression GREATER_EQ arithExpression
    (13) relExpression -> . relExpression LESS_EQ arithExpression
    (14) relExpression -> . arithExpression
    (15) arithExpression -> . arithExpression PLUS term
    (16) arithExpression -> . arithExpression MINUS term
    (17) arithExpression -> . term
    (18) term -> . term TIMES term1
    (19) term -> . term DIVIDE term1
    (20) term -> . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term                           shift and go to state 17
    term1                          shift and go to state 2
    relExpression                  shift and go to state 7
    arithExpression                shift and go to state 11
    logicExpression                shift and go to state 8
    eqExpression                   shift and go to state 9
    factor                         shift and go to state 10
    andExpression                  shift and go to state 19
    nonEqExpression                shift and go to state 15
    expression                     shift and go to state 44
    term2                          shift and go to state 1

state 25

    (31) factor -> MINUS factor .

    POWER           reduce using rule 31 (factor -> MINUS factor .)
    MODULO          reduce using rule 31 (factor -> MINUS factor .)
    FLOOR_DIV       reduce using rule 31 (factor -> MINUS factor .)
    TIMES           reduce using rule 31 (factor -> MINUS factor .)
    DIVIDE          reduce using rule 31 (factor -> MINUS factor .)
    PLUS            reduce using rule 31 (factor -> MINUS factor .)
    MINUS           reduce using rule 31 (factor -> MINUS factor .)
    LESS            reduce using rule 31 (factor -> MINUS factor .)
    GREATER         reduce using rule 31 (factor -> MINUS factor .)
    GREATER_EQ      reduce using rule 31 (factor -> MINUS factor .)
    LESS_EQ         reduce using rule 31 (factor -> MINUS factor .)
    NOT_EQ          reduce using rule 31 (factor -> MINUS factor .)
    IS_EQ           reduce using rule 31 (factor -> MINUS factor .)
    AND             reduce using rule 31 (factor -> MINUS factor .)
    OR              reduce using rule 31 (factor -> MINUS factor .)
    RPAREN          reduce using rule 31 (factor -> MINUS factor .)
    $end            reduce using rule 31 (factor -> MINUS factor .)


state 26

    (13) relExpression -> relExpression LESS_EQ . arithExpression
    (15) arithExpression -> . arithExpression PLUS term
    (16) arithExpression -> . arithExpression MINUS term
    (17) arithExpression -> . term
    (18) term -> . term TIMES term1
    (19) term -> . term DIVIDE term1
    (20) term -> . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term                           shift and go to state 17
    term2                          shift and go to state 1
    term1                          shift and go to state 2
    arithExpression                shift and go to state 45
    factor                         shift and go to state 10

state 27

    (11) relExpression -> relExpression GREATER . arithExpression
    (15) arithExpression -> . arithExpression PLUS term
    (16) arithExpression -> . arithExpression MINUS term
    (17) arithExpression -> . term
    (18) term -> . term TIMES term1
    (19) term -> . term DIVIDE term1
    (20) term -> . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term                           shift and go to state 17
    term2                          shift and go to state 1
    term1                          shift and go to state 2
    arithExpression                shift and go to state 46
    factor                         shift and go to state 10

state 28

    (10) relExpression -> relExpression LESS . arithExpression
    (15) arithExpression -> . arithExpression PLUS term
    (16) arithExpression -> . arithExpression MINUS term
    (17) arithExpression -> . term
    (18) term -> . term TIMES term1
    (19) term -> . term DIVIDE term1
    (20) term -> . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term                           shift and go to state 17
    term2                          shift and go to state 1
    term1                          shift and go to state 2
    arithExpression                shift and go to state 47
    factor                         shift and go to state 10

state 29

    (12) relExpression -> relExpression GREATER_EQ . arithExpression
    (15) arithExpression -> . arithExpression PLUS term
    (16) arithExpression -> . arithExpression MINUS term
    (17) arithExpression -> . term
    (18) term -> . term TIMES term1
    (19) term -> . term DIVIDE term1
    (20) term -> . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term                           shift and go to state 17
    term2                          shift and go to state 1
    term1                          shift and go to state 2
    arithExpression                shift and go to state 48
    factor                         shift and go to state 10

state 30

    (2) logicExpression -> logicExpression OR . andExpression
    (4) andExpression -> . andExpression AND relExpression
    (5) andExpression -> . eqExpression
    (6) eqExpression -> . eqExpression IS_EQ nonEqExpression
    (7) eqExpression -> . nonEqExpression
    (8) nonEqExpression -> . nonEqExpression NOT_EQ relExpression
    (9) nonEqExpression -> . relExpression
    (10) relExpression -> . relExpression LESS arithExpression
    (11) relExpression -> . relExpression GREATER arithExpression
    (12) relExpression -> . relExpression GREATER_EQ arithExpression
    (13) relExpression -> . relExpression LESS_EQ arithExpression
    (14) relExpression -> . arithExpression
    (15) arithExpression -> . arithExpression PLUS term
    (16) arithExpression -> . arithExpression MINUS term
    (17) arithExpression -> . term
    (18) term -> . term TIMES term1
    (19) term -> . term DIVIDE term1
    (20) term -> . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term                           shift and go to state 17
    term1                          shift and go to state 2
    relExpression                  shift and go to state 7
    arithExpression                shift and go to state 11
    eqExpression                   shift and go to state 9
    factor                         shift and go to state 10
    andExpression                  shift and go to state 49
    nonEqExpression                shift and go to state 15
    term2                          shift and go to state 1

state 31

    (6) eqExpression -> eqExpression IS_EQ . nonEqExpression
    (8) nonEqExpression -> . nonEqExpression NOT_EQ relExpression
    (9) nonEqExpression -> . relExpression
    (10) relExpression -> . relExpression LESS arithExpression
    (11) relExpression -> . relExpression GREATER arithExpression
    (12) relExpression -> . relExpression GREATER_EQ arithExpression
    (13) relExpression -> . relExpression LESS_EQ arithExpression
    (14) relExpression -> . arithExpression
    (15) arithExpression -> . arithExpression PLUS term
    (16) arithExpression -> . arithExpression MINUS term
    (17) arithExpression -> . term
    (18) term -> . term TIMES term1
    (19) term -> . term DIVIDE term1
    (20) term -> . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term                           shift and go to state 17
    relExpression                  shift and go to state 7
    term1                          shift and go to state 2
    arithExpression                shift and go to state 11
    factor                         shift and go to state 10
    nonEqExpression                shift and go to state 50
    term2                          shift and go to state 1

state 32

    (15) arithExpression -> arithExpression PLUS . term
    (18) term -> . term TIMES term1
    (19) term -> . term DIVIDE term1
    (20) term -> . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term                           shift and go to state 51
    term2                          shift and go to state 1
    term1                          shift and go to state 2
    factor                         shift and go to state 10

state 33

    (16) arithExpression -> arithExpression MINUS . term
    (18) term -> . term TIMES term1
    (19) term -> . term DIVIDE term1
    (20) term -> . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term                           shift and go to state 52
    term2                          shift and go to state 1
    term1                          shift and go to state 2
    factor                         shift and go to state 10

state 34

    (30) factor -> NOT factor .

    POWER           reduce using rule 30 (factor -> NOT factor .)
    MODULO          reduce using rule 30 (factor -> NOT factor .)
    FLOOR_DIV       reduce using rule 30 (factor -> NOT factor .)
    TIMES           reduce using rule 30 (factor -> NOT factor .)
    DIVIDE          reduce using rule 30 (factor -> NOT factor .)
    PLUS            reduce using rule 30 (factor -> NOT factor .)
    MINUS           reduce using rule 30 (factor -> NOT factor .)
    LESS            reduce using rule 30 (factor -> NOT factor .)
    GREATER         reduce using rule 30 (factor -> NOT factor .)
    GREATER_EQ      reduce using rule 30 (factor -> NOT factor .)
    LESS_EQ         reduce using rule 30 (factor -> NOT factor .)
    NOT_EQ          reduce using rule 30 (factor -> NOT factor .)
    IS_EQ           reduce using rule 30 (factor -> NOT factor .)
    AND             reduce using rule 30 (factor -> NOT factor .)
    OR              reduce using rule 30 (factor -> NOT factor .)
    RPAREN          reduce using rule 30 (factor -> NOT factor .)
    $end            reduce using rule 30 (factor -> NOT factor .)


state 35

    (32) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 53


state 36

    (8) nonEqExpression -> nonEqExpression NOT_EQ . relExpression
    (10) relExpression -> . relExpression LESS arithExpression
    (11) relExpression -> . relExpression GREATER arithExpression
    (12) relExpression -> . relExpression GREATER_EQ arithExpression
    (13) relExpression -> . relExpression LESS_EQ arithExpression
    (14) relExpression -> . arithExpression
    (15) arithExpression -> . arithExpression PLUS term
    (16) arithExpression -> . arithExpression MINUS term
    (17) arithExpression -> . term
    (18) term -> . term TIMES term1
    (19) term -> . term DIVIDE term1
    (20) term -> . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term                           shift and go to state 17
    term2                          shift and go to state 1
    term1                          shift and go to state 2
    arithExpression                shift and go to state 11
    factor                         shift and go to state 10
    relExpression                  shift and go to state 54

state 37

    (19) term -> term DIVIDE . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term2                          shift and go to state 1
    term1                          shift and go to state 55
    factor                         shift and go to state 10

state 38

    (18) term -> term TIMES . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term2                          shift and go to state 1
    term1                          shift and go to state 56
    factor                         shift and go to state 10

state 39

    (33) factor -> isTRUE LPAREN . expression RPAREN
    (1) expression -> . logicExpression
    (2) logicExpression -> . logicExpression OR andExpression
    (3) logicExpression -> . andExpression
    (4) andExpression -> . andExpression AND relExpression
    (5) andExpression -> . eqExpression
    (6) eqExpression -> . eqExpression IS_EQ nonEqExpression
    (7) eqExpression -> . nonEqExpression
    (8) nonEqExpression -> . nonEqExpression NOT_EQ relExpression
    (9) nonEqExpression -> . relExpression
    (10) relExpression -> . relExpression LESS arithExpression
    (11) relExpression -> . relExpression GREATER arithExpression
    (12) relExpression -> . relExpression GREATER_EQ arithExpression
    (13) relExpression -> . relExpression LESS_EQ arithExpression
    (14) relExpression -> . arithExpression
    (15) arithExpression -> . arithExpression PLUS term
    (16) arithExpression -> . arithExpression MINUS term
    (17) arithExpression -> . term
    (18) term -> . term TIMES term1
    (19) term -> . term DIVIDE term1
    (20) term -> . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term                           shift and go to state 17
    term1                          shift and go to state 2
    relExpression                  shift and go to state 7
    arithExpression                shift and go to state 11
    logicExpression                shift and go to state 8
    eqExpression                   shift and go to state 9
    factor                         shift and go to state 10
    andExpression                  shift and go to state 19
    nonEqExpression                shift and go to state 15
    expression                     shift and go to state 57
    term2                          shift and go to state 1

state 40

    (4) andExpression -> andExpression AND . relExpression
    (10) relExpression -> . relExpression LESS arithExpression
    (11) relExpression -> . relExpression GREATER arithExpression
    (12) relExpression -> . relExpression GREATER_EQ arithExpression
    (13) relExpression -> . relExpression LESS_EQ arithExpression
    (14) relExpression -> . arithExpression
    (15) arithExpression -> . arithExpression PLUS term
    (16) arithExpression -> . arithExpression MINUS term
    (17) arithExpression -> . term
    (18) term -> . term TIMES term1
    (19) term -> . term DIVIDE term1
    (20) term -> . term1
    (21) term1 -> . term1 MODULO term2
    (22) term1 -> . term1 FLOOR_DIV term2
    (23) term1 -> . term2
    (24) term2 -> . term2 POWER factor
    (25) term2 -> . factor
    (26) factor -> . NUMBER
    (27) factor -> . TRUE
    (28) factor -> . FALSE
    (29) factor -> . ID
    (30) factor -> . NOT factor
    (31) factor -> . MINUS factor
    (32) factor -> . LPAREN expression RPAREN
    (33) factor -> . isTRUE LPAREN expression RPAREN
    (34) factor -> . PRINT LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    TRUE            shift and go to state 5
    FALSE           shift and go to state 14
    ID              shift and go to state 16
    NOT             shift and go to state 12
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 13
    isTRUE          shift and go to state 18
    PRINT           shift and go to state 4

    term                           shift and go to state 17
    term2                          shift and go to state 1
    term1                          shift and go to state 2
    arithExpression                shift and go to state 11
    factor                         shift and go to state 10
    relExpression                  shift and go to state 58

state 41

    (24) term2 -> term2 POWER factor .

    POWER           reduce using rule 24 (term2 -> term2 POWER factor .)
    MODULO          reduce using rule 24 (term2 -> term2 POWER factor .)
    FLOOR_DIV       reduce using rule 24 (term2 -> term2 POWER factor .)
    TIMES           reduce using rule 24 (term2 -> term2 POWER factor .)
    DIVIDE          reduce using rule 24 (term2 -> term2 POWER factor .)
    PLUS            reduce using rule 24 (term2 -> term2 POWER factor .)
    MINUS           reduce using rule 24 (term2 -> term2 POWER factor .)
    LESS            reduce using rule 24 (term2 -> term2 POWER factor .)
    GREATER         reduce using rule 24 (term2 -> term2 POWER factor .)
    GREATER_EQ      reduce using rule 24 (term2 -> term2 POWER factor .)
    LESS_EQ         reduce using rule 24 (term2 -> term2 POWER factor .)
    NOT_EQ          reduce using rule 24 (term2 -> term2 POWER factor .)
    IS_EQ           reduce using rule 24 (term2 -> term2 POWER factor .)
    AND             reduce using rule 24 (term2 -> term2 POWER factor .)
    OR              reduce using rule 24 (term2 -> term2 POWER factor .)
    $end            reduce using rule 24 (term2 -> term2 POWER factor .)
    RPAREN          reduce using rule 24 (term2 -> term2 POWER factor .)


state 42

    (22) term1 -> term1 FLOOR_DIV term2 .
    (24) term2 -> term2 . POWER factor

    MODULO          reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    FLOOR_DIV       reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    TIMES           reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    DIVIDE          reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    PLUS            reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    MINUS           reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    LESS            reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    GREATER         reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    GREATER_EQ      reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    LESS_EQ         reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    AND             reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    OR              reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    $end            reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    RPAREN          reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    NOT_EQ          reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    IS_EQ           reduce using rule 22 (term1 -> term1 FLOOR_DIV term2 .)
    POWER           shift and go to state 21


state 43

    (21) term1 -> term1 MODULO term2 .
    (24) term2 -> term2 . POWER factor

    MODULO          reduce using rule 21 (term1 -> term1 MODULO term2 .)
    FLOOR_DIV       reduce using rule 21 (term1 -> term1 MODULO term2 .)
    TIMES           reduce using rule 21 (term1 -> term1 MODULO term2 .)
    DIVIDE          reduce using rule 21 (term1 -> term1 MODULO term2 .)
    PLUS            reduce using rule 21 (term1 -> term1 MODULO term2 .)
    MINUS           reduce using rule 21 (term1 -> term1 MODULO term2 .)
    LESS            reduce using rule 21 (term1 -> term1 MODULO term2 .)
    GREATER         reduce using rule 21 (term1 -> term1 MODULO term2 .)
    GREATER_EQ      reduce using rule 21 (term1 -> term1 MODULO term2 .)
    LESS_EQ         reduce using rule 21 (term1 -> term1 MODULO term2 .)
    AND             reduce using rule 21 (term1 -> term1 MODULO term2 .)
    OR              reduce using rule 21 (term1 -> term1 MODULO term2 .)
    $end            reduce using rule 21 (term1 -> term1 MODULO term2 .)
    RPAREN          reduce using rule 21 (term1 -> term1 MODULO term2 .)
    NOT_EQ          reduce using rule 21 (term1 -> term1 MODULO term2 .)
    IS_EQ           reduce using rule 21 (term1 -> term1 MODULO term2 .)
    POWER           shift and go to state 21


state 44

    (34) factor -> PRINT LPAREN expression . RPAREN

    RPAREN          shift and go to state 59


state 45

    (13) relExpression -> relExpression LESS_EQ arithExpression .
    (15) arithExpression -> arithExpression . PLUS term
    (16) arithExpression -> arithExpression . MINUS term

    LESS            reduce using rule 13 (relExpression -> relExpression LESS_EQ arithExpression .)
    GREATER         reduce using rule 13 (relExpression -> relExpression LESS_EQ arithExpression .)
    GREATER_EQ      reduce using rule 13 (relExpression -> relExpression LESS_EQ arithExpression .)
    LESS_EQ         reduce using rule 13 (relExpression -> relExpression LESS_EQ arithExpression .)
    AND             reduce using rule 13 (relExpression -> relExpression LESS_EQ arithExpression .)
    OR              reduce using rule 13 (relExpression -> relExpression LESS_EQ arithExpression .)
    $end            reduce using rule 13 (relExpression -> relExpression LESS_EQ arithExpression .)
    RPAREN          reduce using rule 13 (relExpression -> relExpression LESS_EQ arithExpression .)
    NOT_EQ          reduce using rule 13 (relExpression -> relExpression LESS_EQ arithExpression .)
    IS_EQ           reduce using rule 13 (relExpression -> relExpression LESS_EQ arithExpression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 46

    (11) relExpression -> relExpression GREATER arithExpression .
    (15) arithExpression -> arithExpression . PLUS term
    (16) arithExpression -> arithExpression . MINUS term

    LESS            reduce using rule 11 (relExpression -> relExpression GREATER arithExpression .)
    GREATER         reduce using rule 11 (relExpression -> relExpression GREATER arithExpression .)
    GREATER_EQ      reduce using rule 11 (relExpression -> relExpression GREATER arithExpression .)
    LESS_EQ         reduce using rule 11 (relExpression -> relExpression GREATER arithExpression .)
    AND             reduce using rule 11 (relExpression -> relExpression GREATER arithExpression .)
    OR              reduce using rule 11 (relExpression -> relExpression GREATER arithExpression .)
    $end            reduce using rule 11 (relExpression -> relExpression GREATER arithExpression .)
    RPAREN          reduce using rule 11 (relExpression -> relExpression GREATER arithExpression .)
    NOT_EQ          reduce using rule 11 (relExpression -> relExpression GREATER arithExpression .)
    IS_EQ           reduce using rule 11 (relExpression -> relExpression GREATER arithExpression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 47

    (10) relExpression -> relExpression LESS arithExpression .
    (15) arithExpression -> arithExpression . PLUS term
    (16) arithExpression -> arithExpression . MINUS term

    LESS            reduce using rule 10 (relExpression -> relExpression LESS arithExpression .)
    GREATER         reduce using rule 10 (relExpression -> relExpression LESS arithExpression .)
    GREATER_EQ      reduce using rule 10 (relExpression -> relExpression LESS arithExpression .)
    LESS_EQ         reduce using rule 10 (relExpression -> relExpression LESS arithExpression .)
    AND             reduce using rule 10 (relExpression -> relExpression LESS arithExpression .)
    OR              reduce using rule 10 (relExpression -> relExpression LESS arithExpression .)
    $end            reduce using rule 10 (relExpression -> relExpression LESS arithExpression .)
    RPAREN          reduce using rule 10 (relExpression -> relExpression LESS arithExpression .)
    NOT_EQ          reduce using rule 10 (relExpression -> relExpression LESS arithExpression .)
    IS_EQ           reduce using rule 10 (relExpression -> relExpression LESS arithExpression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 48

    (12) relExpression -> relExpression GREATER_EQ arithExpression .
    (15) arithExpression -> arithExpression . PLUS term
    (16) arithExpression -> arithExpression . MINUS term

    LESS            reduce using rule 12 (relExpression -> relExpression GREATER_EQ arithExpression .)
    GREATER         reduce using rule 12 (relExpression -> relExpression GREATER_EQ arithExpression .)
    GREATER_EQ      reduce using rule 12 (relExpression -> relExpression GREATER_EQ arithExpression .)
    LESS_EQ         reduce using rule 12 (relExpression -> relExpression GREATER_EQ arithExpression .)
    AND             reduce using rule 12 (relExpression -> relExpression GREATER_EQ arithExpression .)
    OR              reduce using rule 12 (relExpression -> relExpression GREATER_EQ arithExpression .)
    $end            reduce using rule 12 (relExpression -> relExpression GREATER_EQ arithExpression .)
    RPAREN          reduce using rule 12 (relExpression -> relExpression GREATER_EQ arithExpression .)
    NOT_EQ          reduce using rule 12 (relExpression -> relExpression GREATER_EQ arithExpression .)
    IS_EQ           reduce using rule 12 (relExpression -> relExpression GREATER_EQ arithExpression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 49

    (2) logicExpression -> logicExpression OR andExpression .
    (4) andExpression -> andExpression . AND relExpression

    OR              reduce using rule 2 (logicExpression -> logicExpression OR andExpression .)
    RPAREN          reduce using rule 2 (logicExpression -> logicExpression OR andExpression .)
    $end            reduce using rule 2 (logicExpression -> logicExpression OR andExpression .)
    AND             shift and go to state 40


state 50

    (6) eqExpression -> eqExpression IS_EQ nonEqExpression .
    (8) nonEqExpression -> nonEqExpression . NOT_EQ relExpression

    IS_EQ           reduce using rule 6 (eqExpression -> eqExpression IS_EQ nonEqExpression .)
    AND             reduce using rule 6 (eqExpression -> eqExpression IS_EQ nonEqExpression .)
    OR              reduce using rule 6 (eqExpression -> eqExpression IS_EQ nonEqExpression .)
    RPAREN          reduce using rule 6 (eqExpression -> eqExpression IS_EQ nonEqExpression .)
    $end            reduce using rule 6 (eqExpression -> eqExpression IS_EQ nonEqExpression .)
    NOT_EQ          shift and go to state 36


state 51

    (15) arithExpression -> arithExpression PLUS term .
    (18) term -> term . TIMES term1
    (19) term -> term . DIVIDE term1

    PLUS            reduce using rule 15 (arithExpression -> arithExpression PLUS term .)
    MINUS           reduce using rule 15 (arithExpression -> arithExpression PLUS term .)
    LESS            reduce using rule 15 (arithExpression -> arithExpression PLUS term .)
    GREATER         reduce using rule 15 (arithExpression -> arithExpression PLUS term .)
    GREATER_EQ      reduce using rule 15 (arithExpression -> arithExpression PLUS term .)
    LESS_EQ         reduce using rule 15 (arithExpression -> arithExpression PLUS term .)
    NOT_EQ          reduce using rule 15 (arithExpression -> arithExpression PLUS term .)
    IS_EQ           reduce using rule 15 (arithExpression -> arithExpression PLUS term .)
    AND             reduce using rule 15 (arithExpression -> arithExpression PLUS term .)
    OR              reduce using rule 15 (arithExpression -> arithExpression PLUS term .)
    RPAREN          reduce using rule 15 (arithExpression -> arithExpression PLUS term .)
    $end            reduce using rule 15 (arithExpression -> arithExpression PLUS term .)
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 37


state 52

    (16) arithExpression -> arithExpression MINUS term .
    (18) term -> term . TIMES term1
    (19) term -> term . DIVIDE term1

    PLUS            reduce using rule 16 (arithExpression -> arithExpression MINUS term .)
    MINUS           reduce using rule 16 (arithExpression -> arithExpression MINUS term .)
    LESS            reduce using rule 16 (arithExpression -> arithExpression MINUS term .)
    GREATER         reduce using rule 16 (arithExpression -> arithExpression MINUS term .)
    GREATER_EQ      reduce using rule 16 (arithExpression -> arithExpression MINUS term .)
    LESS_EQ         reduce using rule 16 (arithExpression -> arithExpression MINUS term .)
    NOT_EQ          reduce using rule 16 (arithExpression -> arithExpression MINUS term .)
    IS_EQ           reduce using rule 16 (arithExpression -> arithExpression MINUS term .)
    AND             reduce using rule 16 (arithExpression -> arithExpression MINUS term .)
    OR              reduce using rule 16 (arithExpression -> arithExpression MINUS term .)
    RPAREN          reduce using rule 16 (arithExpression -> arithExpression MINUS term .)
    $end            reduce using rule 16 (arithExpression -> arithExpression MINUS term .)
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 37


state 53

    (32) factor -> LPAREN expression RPAREN .

    POWER           reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    FLOOR_DIV       reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    IS_EQ           reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 32 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 32 (factor -> LPAREN expression RPAREN .)


state 54

    (8) nonEqExpression -> nonEqExpression NOT_EQ relExpression .
    (10) relExpression -> relExpression . LESS arithExpression
    (11) relExpression -> relExpression . GREATER arithExpression
    (12) relExpression -> relExpression . GREATER_EQ arithExpression
    (13) relExpression -> relExpression . LESS_EQ arithExpression

    NOT_EQ          reduce using rule 8 (nonEqExpression -> nonEqExpression NOT_EQ relExpression .)
    IS_EQ           reduce using rule 8 (nonEqExpression -> nonEqExpression NOT_EQ relExpression .)
    AND             reduce using rule 8 (nonEqExpression -> nonEqExpression NOT_EQ relExpression .)
    OR              reduce using rule 8 (nonEqExpression -> nonEqExpression NOT_EQ relExpression .)
    $end            reduce using rule 8 (nonEqExpression -> nonEqExpression NOT_EQ relExpression .)
    RPAREN          reduce using rule 8 (nonEqExpression -> nonEqExpression NOT_EQ relExpression .)
    LESS            shift and go to state 28
    GREATER         shift and go to state 27
    GREATER_EQ      shift and go to state 29
    LESS_EQ         shift and go to state 26


state 55

    (19) term -> term DIVIDE term1 .
    (21) term1 -> term1 . MODULO term2
    (22) term1 -> term1 . FLOOR_DIV term2

    TIMES           reduce using rule 19 (term -> term DIVIDE term1 .)
    DIVIDE          reduce using rule 19 (term -> term DIVIDE term1 .)
    PLUS            reduce using rule 19 (term -> term DIVIDE term1 .)
    MINUS           reduce using rule 19 (term -> term DIVIDE term1 .)
    LESS            reduce using rule 19 (term -> term DIVIDE term1 .)
    GREATER         reduce using rule 19 (term -> term DIVIDE term1 .)
    GREATER_EQ      reduce using rule 19 (term -> term DIVIDE term1 .)
    LESS_EQ         reduce using rule 19 (term -> term DIVIDE term1 .)
    NOT_EQ          reduce using rule 19 (term -> term DIVIDE term1 .)
    IS_EQ           reduce using rule 19 (term -> term DIVIDE term1 .)
    AND             reduce using rule 19 (term -> term DIVIDE term1 .)
    OR              reduce using rule 19 (term -> term DIVIDE term1 .)
    $end            reduce using rule 19 (term -> term DIVIDE term1 .)
    RPAREN          reduce using rule 19 (term -> term DIVIDE term1 .)
    MODULO          shift and go to state 23
    FLOOR_DIV       shift and go to state 22


state 56

    (18) term -> term TIMES term1 .
    (21) term1 -> term1 . MODULO term2
    (22) term1 -> term1 . FLOOR_DIV term2

    TIMES           reduce using rule 18 (term -> term TIMES term1 .)
    DIVIDE          reduce using rule 18 (term -> term TIMES term1 .)
    PLUS            reduce using rule 18 (term -> term TIMES term1 .)
    MINUS           reduce using rule 18 (term -> term TIMES term1 .)
    LESS            reduce using rule 18 (term -> term TIMES term1 .)
    GREATER         reduce using rule 18 (term -> term TIMES term1 .)
    GREATER_EQ      reduce using rule 18 (term -> term TIMES term1 .)
    LESS_EQ         reduce using rule 18 (term -> term TIMES term1 .)
    NOT_EQ          reduce using rule 18 (term -> term TIMES term1 .)
    IS_EQ           reduce using rule 18 (term -> term TIMES term1 .)
    AND             reduce using rule 18 (term -> term TIMES term1 .)
    OR              reduce using rule 18 (term -> term TIMES term1 .)
    $end            reduce using rule 18 (term -> term TIMES term1 .)
    RPAREN          reduce using rule 18 (term -> term TIMES term1 .)
    MODULO          shift and go to state 23
    FLOOR_DIV       shift and go to state 22


state 57

    (33) factor -> isTRUE LPAREN expression . RPAREN

    RPAREN          shift and go to state 60


state 58

    (4) andExpression -> andExpression AND relExpression .
    (10) relExpression -> relExpression . LESS arithExpression
    (11) relExpression -> relExpression . GREATER arithExpression
    (12) relExpression -> relExpression . GREATER_EQ arithExpression
    (13) relExpression -> relExpression . LESS_EQ arithExpression

    AND             reduce using rule 4 (andExpression -> andExpression AND relExpression .)
    OR              reduce using rule 4 (andExpression -> andExpression AND relExpression .)
    RPAREN          reduce using rule 4 (andExpression -> andExpression AND relExpression .)
    $end            reduce using rule 4 (andExpression -> andExpression AND relExpression .)
    LESS            shift and go to state 28
    GREATER         shift and go to state 27
    GREATER_EQ      shift and go to state 29
    LESS_EQ         shift and go to state 26


state 59

    (34) factor -> PRINT LPAREN expression RPAREN .

    POWER           reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    MODULO          reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    FLOOR_DIV       reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    TIMES           reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    PLUS            reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    MINUS           reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    LESS            reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    GREATER         reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    IS_EQ           reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    AND             reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    OR              reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    RPAREN          reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 34 (factor -> PRINT LPAREN expression RPAREN .)


state 60

    (33) factor -> isTRUE LPAREN expression RPAREN .

    POWER           reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    MODULO          reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    FLOOR_DIV       reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    TIMES           reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    PLUS            reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    MINUS           reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    LESS            reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    GREATER         reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    IS_EQ           reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    AND             reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    OR              reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)
    $end            reduce using rule 33 (factor -> isTRUE LPAREN expression RPAREN .)

